[{"/Users/Haaris/Documents/School/Fall_2020/ELEC_490/ECG-Abnormality-Detection/Web-App/frontend/src/index.js":"1","/Users/Haaris/Documents/School/Fall_2020/ELEC_490/ECG-Abnormality-Detection/Web-App/frontend/src/App.js":"2","/Users/Haaris/Documents/School/Fall_2020/ELEC_490/ECG-Abnormality-Detection/Web-App/frontend/src/reportWebVitals.js":"3","/Users/Haaris/Documents/School/Fall_2020/ELEC_490/ECG-Abnormality-Detection/Web-App/frontend/src/components/Graph.js":"4","/Users/Haaris/Documents/School/Fall_2020/ELEC_490/ECG-Abnormality-Detection/Web-App/frontend/src/components/RSTable.js":"5","/Users/Haaris/Documents/School/Fall_2020/ELEC_490/ECG-Abnormality-Detection/Web-App/frontend/src/apis/FetchECGData.js":"6","/Users/Haaris/Documents/School/Fall_2020/ELEC_490/ECG-Abnormality-Detection/Web-App/frontend/src/components/TSTable.js":"7"},{"size":503,"mtime":1609722616405,"results":"8","hashOfConfig":"9"},{"size":4405,"mtime":1611532498848,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":1672,"mtime":1611090003981,"results":"12","hashOfConfig":"9"},{"size":4621,"mtime":1611090582471,"results":"13","hashOfConfig":"9"},{"size":98,"mtime":1609703765636,"results":"14","hashOfConfig":"9"},{"size":5892,"mtime":1611442116897,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1x83v0b",{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"18"},"/Users/Haaris/Documents/School/Fall_2020/ELEC_490/ECG-Abnormality-Detection/Web-App/frontend/src/index.js",[],["33","34"],"/Users/Haaris/Documents/School/Fall_2020/ELEC_490/ECG-Abnormality-Detection/Web-App/frontend/src/App.js",["35","36"],"/Users/Haaris/Documents/School/Fall_2020/ELEC_490/ECG-Abnormality-Detection/Web-App/frontend/src/reportWebVitals.js",[],"/Users/Haaris/Documents/School/Fall_2020/ELEC_490/ECG-Abnormality-Detection/Web-App/frontend/src/components/Graph.js",[],"/Users/Haaris/Documents/School/Fall_2020/ELEC_490/ECG-Abnormality-Detection/Web-App/frontend/src/components/RSTable.js",["37","38"],"import { useState } from \"react\";\n\nconst RSTable = (props) => {\n  const [tableState, setTableState] = useState(0);\n\n  return (\n    <div>\n      <h4>Testset Results</h4>\n      <div\n        className=\"table-container\"\n        style={{ height: \"300px\", overflow: \"auto\" }}\n      >\n        <table className=\"table table-striped table-hover table-sm\">\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>Time</th>\n              <th>Classification</th>\n            </tr>\n          </thead>\n          <tbody>\n            {props.entries.map((item) => {\n              const prediction = item.label;\n              const truth = item.true_lab;\n              if (prediction === \"NSR\" && truth === \"NSR\\r\")\n                return (\n                  <tr\n                    className=\"\"\n                    onClick={() => props.click(item.id, \"Normal\", \"Normal\")}\n                  >\n                    <td>{item.id}</td>\n                    <td>Normal</td>\n                    <td>Normal</td>\n                  </tr>\n                );\n              if (prediction === \"NSR\" && truth === \"Other\\r\")\n                return (\n                  <tr\n                    className=\"table-danger\"\n                    onClick={() => props.click(item.id, \"Normal\", \"Abnormal\")}\n                  >\n                    <td>{item.id}</td>\n                    <td>Normal</td>\n                    <td>Irregular</td>\n                  </tr>\n                );\n              if (prediction === \"NSR\" && truth === \"Noisy\\r\")\n                return (\n                  <tr\n                    className=\"table-danger\"\n                    onClick={() => props.click(item.id, \"Normal\", \"Noisy\")}\n                  >\n                    <td>{item.id}</td>\n                    <td>Normal</td>\n                    <td>Noisy</td>\n                  </tr>\n                );\n              if (prediction === \"Other\" && truth === \"Other\\r\")\n                return (\n                  <tr\n                    className=\"\"\n                    onClick={() => props.click(item.id, \"Abnormal\", \"Abnormal\")}\n                  >\n                    <td>{item.id}</td>\n                    <td>Irregular</td>\n                    <td>Irregular</td>\n                  </tr>\n                );\n              if (prediction === \"Other\" && truth === \"NSR\\r\")\n                return (\n                  <tr\n                    className=\"table-danger\"\n                    onClick={() => props.click(item.id, \"Abnormal\", \"Normal\")}\n                  >\n                    <td>{item.id}</td>\n                    <td>Irregular</td>\n                    <td>Normal</td>\n                  </tr>\n                );\n              if (prediction === \"Other\" && truth === \"Noisy\\r\")\n                return (\n                  <tr\n                    className=\"bg-danger\"\n                    onClick={() => props.click(item.id, \"Abnormal\", \"Noisy\")}\n                  >\n                    <td>{item.id}</td>\n                    <td>Irregular</td>\n                    <td>Noisy</td>\n                  </tr>\n                );\n              if (prediction === \"Noisy\" && truth === \"Noisy\\r\")\n                return (\n                  <tr\n                    className=\"\"\n                    onClick={() => props.click(item.id, \"Noisy\", \"Noisy\")}\n                  >\n                    <td>{item.id}</td>\n                    <td>Noisy</td>\n                    <td>Noisy</td>\n                  </tr>\n                );\n              if (prediction === \"Noisy\" && truth === \"NSR\\r\")\n                return (\n                  <tr\n                    className=\"bg-danger\"\n                    onClick={() => props.click(item.id, \"Noisy\", \"Normal\")}\n                  >\n                    <td>{item.id}</td>\n                    <td>Noisy</td>\n                    <td>Normal</td>\n                  </tr>\n                );\n              if (prediction === \"Noisy\" && truth === \"Other\\r\")\n                return (\n                  <tr\n                    className=\"bg-danger\"\n                    onClick={() => props.click(item.id, \"Noisy\", \"Abnormal\")}\n                  >\n                    <td>{item.id}</td>\n                    <td>Noisy</td>\n                    <td>Irregular</td>\n                  </tr>\n                );\n              return (\n                <tr className=\"table-primary\">\n                  <td>{item.id}</td>\n                  <td>{prediction}</td>\n                  <td>{truth}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default RSTable;\n","/Users/Haaris/Documents/School/Fall_2020/ELEC_490/ECG-Abnormality-Detection/Web-App/frontend/src/apis/FetchECGData.js",[],"/Users/Haaris/Documents/School/Fall_2020/ELEC_490/ECG-Abnormality-Detection/Web-App/frontend/src/components/TSTable.js",["39","40"],"import { useState } from \"react\";\n\nconst TSTable = (props) => {\n  return (\n    <div>\n      <h4>Testset Results</h4>\n      <div className=\"btn-group container\">\n        <button\n          className={\n            props.tab === 0\n              ? \"btn btn-outline-success active\"\n              : \"btn btn-outline-success\"\n          }\n          onClick={() => props.changeClass(0)}\n        >\n          Normal\n        </button>\n\n        <button\n          className={\n            props.tab === 1\n              ? \"btn btn-outline-danger active\"\n              : \"btn btn-outline-danger\"\n          }\n          onClick={() => props.changeClass(1)}\n        >\n          Abnormal\n        </button>\n        <button\n          className={\n            props.tab === 2\n              ? \"btn btn-outline-warning active\"\n              : \"btn btn-outline-warning\"\n          }\n          onClick={() => props.changeClass(2)}\n        >\n          Noisy\n        </button>\n      </div>\n      <div\n        className=\"table-container\"\n        style={{ height: \"400px\", overflow: \"auto\", margin: \"10px 10px 100px\" }}\n      >\n        <table className=\"table table-hover table-sm\">\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>Prediction</th>\n              <th>Ground Truth</th>\n            </tr>\n          </thead>\n          <tbody>\n            {props.entries.map((item) => {\n              const prediction = item.label;\n              const truth = item.true_lab;\n              if (prediction === \"NSR\" && truth === \"NSR\\r\" && props.tab === 0)\n                return (\n                  <tr\n                    className=\"\"\n                    onClick={() => props.click(item.id, \"Normal\", \"Normal\")}\n                  >\n                    <td>{item.id}</td>\n                    <td>Normal</td>\n                    <td>Normal</td>\n                  </tr>\n                );\n              if (\n                prediction === \"NSR\" &&\n                truth === \"Other\\r\" &&\n                props.tab === 0\n              )\n                return (\n                  <tr\n                    className=\"table-danger\"\n                    onClick={() => props.click(item.id, \"Normal\", \"Abnormal\")}\n                  >\n                    <td>{item.id}</td>\n                    <td>Normal</td>\n                    <td>Irregular</td>\n                  </tr>\n                );\n              if (\n                prediction === \"NSR\" &&\n                truth === \"Noisy\\r\" &&\n                props.tab === 0\n              )\n                return (\n                  <tr\n                    className=\"table-danger\"\n                    onClick={() => props.click(item.id, \"Normal\", \"Noisy\")}\n                  >\n                    <td>{item.id}</td>\n                    <td>Normal</td>\n                    <td>Noisy</td>\n                  </tr>\n                );\n              if (\n                prediction === \"Other\" &&\n                truth === \"Other\\r\" &&\n                props.tab === 1\n              )\n                return (\n                  <tr\n                    className=\"\"\n                    onClick={() => props.click(item.id, \"Abnormal\", \"Abnormal\")}\n                  >\n                    <td>{item.id}</td>\n                    <td>Abnormal</td>\n                    <td>Abnormal</td>\n                  </tr>\n                );\n              if (\n                prediction === \"Other\" &&\n                truth === \"NSR\\r\" &&\n                props.tab === 1\n              )\n                return (\n                  <tr\n                    className=\"table-danger\"\n                    onClick={() => props.click(item.id, \"Abnormal\", \"Normal\")}\n                  >\n                    <td>{item.id}</td>\n                    <td>Abnormal</td>\n                    <td>Normal</td>\n                  </tr>\n                );\n              if (\n                prediction === \"Other\" &&\n                truth === \"Noisy\\r\" &&\n                props.tab === 1\n              )\n                return (\n                  <tr\n                    className=\"table-danger\"\n                    onClick={() => props.click(item.id, \"Abnormal\", \"Noisy\")}\n                  >\n                    <td>{item.id}</td>\n                    <td>Abnormal</td>\n                    <td>Noisy</td>\n                  </tr>\n                );\n              if (\n                prediction === \"Noisy\" &&\n                truth === \"Noisy\\r\" &&\n                props.tab === 2\n              )\n                return (\n                  <tr\n                    className=\"\"\n                    onClick={() => props.click(item.id, \"Noisy\", \"Noisy\")}\n                  >\n                    <td>{item.id}</td>\n                    <td>Noisy</td>\n                    <td>Noisy</td>\n                  </tr>\n                );\n              if (\n                prediction === \"Noisy\" &&\n                truth === \"NSR\\r\" &&\n                props.tab === 2\n              )\n                return (\n                  <tr\n                    className=\"table-danger\"\n                    onClick={() => props.click(item.id, \"Noisy\", \"Normal\")}\n                  >\n                    <td>{item.id}</td>\n                    <td>Noisy</td>\n                    <td>Normal</td>\n                  </tr>\n                );\n              if (\n                prediction === \"Noisy\" &&\n                truth === \"Other\\r\" &&\n                props.tab === 2\n              )\n                return (\n                  <tr\n                    className=\"table-danger\"\n                    onClick={() => props.click(item.id, \"Noisy\", \"Abnormal\")}\n                  >\n                    <td>{item.id}</td>\n                    <td>Noisy</td>\n                    <td>Abnormal</td>\n                  </tr>\n                );\n            })}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default TSTable;\n",{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":20,"column":10,"nodeType":"47","messageId":"48","endLine":20,"endColumn":24},{"ruleId":"45","severity":1,"message":"49","line":22,"column":21,"nodeType":"47","messageId":"48","endLine":22,"endColumn":33},{"ruleId":"45","severity":1,"message":"50","line":4,"column":10,"nodeType":"47","messageId":"48","endLine":4,"endColumn":20},{"ruleId":"45","severity":1,"message":"51","line":4,"column":22,"nodeType":"47","messageId":"48","endLine":4,"endColumn":35},{"ruleId":"45","severity":1,"message":"52","line":1,"column":10,"nodeType":"47","messageId":"48","endLine":1,"endColumn":18},{"ruleId":"53","severity":1,"message":"54","line":53,"column":39,"nodeType":"55","messageId":"56","endLine":53,"endColumn":41},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"no-unused-vars","'rsTableEntries' is assigned a value but never used.","Identifier","unusedVar","'setAppStatus' is assigned a value but never used.","'tableState' is assigned a value but never used.","'setTableState' is assigned a value but never used.","'useState' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]